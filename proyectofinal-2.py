# -*- coding: utf-8 -*-
"""Proyectofinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10_FzrdPP536uu6hhS0ZyfvQEnTSpX0aF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

def obtener_datos(tickers, start_date, end_date):
    precios = yf.download(tickers, start=start_date, end=end_date)['Adj Close']
    rendimientos = precios.pct_change().dropna()
    return rendimientos

def cml(activos, rf_rate):
    rendimientos = obtener_datos(activos, start_date='2022-01-01', end_date='2023-01-01')

    cov_matrix = rendimientos.cov()
    exp_rendimientos = rendimientos.mean()

    # Portafolio de mínima varianza
    min_var_portafolio = (np.linalg.inv(cov_matrix) @ exp_rendimientos) / np.sum(np.linalg.inv(cov_matrix) @ exp_rendimientos)

    # Línea de mercado de capitales (CML)
    std_portafolios = []
    rend_portafolios = []
    for w in np.arange(0, 1.1, 0.1):
        port_rendimiento = np.dot(w, exp_rendimientos) + (1 - w) * rf_rate
        port_volatilidad = np.sqrt(np.dot(w, np.dot(cov_matrix, w.T)))
        std_portafolios.append(port_volatilidad)
        rend_portafolios.append(port_rendimiento)

    # Capital Market Line
    cml_slope = (rend_portafolios[-1] - rf_rate) / std_portafolios[-1]
    cml_line = rf_rate + cml_slope * np.array(std_portafolios)

    # Asegurar que los tamaños sean iguales
    assert len(std_portafolios) == len(rend_portafolios) == len(cml_line)

    return std_portafolios, rend_portafolios, cml_line, min_var_portafolio

def graficar_cml(std_portafolios, rend_portafolios, cml_line, min_var_portafolio, activos):
    plt.figure(figsize=(10, 6))
    plt.scatter(std_portafolios, rend_portafolios, marker='o', label='Portafolios')
    plt.plot(std_portafolios, cml_line, color='r', label='CML')
    min_var_volatilidad = np.sqrt(np.dot(min_var_portafolio, np.dot(cov_matrix, min_var_portafolio.T)))
    min_var_rendimiento = np.dot(min_var_portafolio, exp_rendimientos)
    plt.scatter(min_var_volatilidad, min_var_rendimiento, color='g', marker='*', s=200, label='Portafolio de Mínima Varianza')
    plt.title('Capital Market Line')
    plt.xlabel('Volatilidad')
    plt.ylabel('Rendimiento')
    plt.legend()
    plt.show()



# Llamar a la función de graficar
graficar_cml(std_portafolios, rend_portafolios, cml_line, min_var_portafolio, tickers)