# -*- coding: utf-8 -*-
"""Copia de Análisis_de_Portafolios_OP7(Geston) .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j69p3k7SKMAAld52bkbTORG5XNDK_ko4
"""

# Importar las librerias

import numpy as np
import pandas as pd

import datetime
import matplotlib.pyplot as plt

# Grafica iteractiva
from pandas.plotting import scatter_matrix

import yfinance as yf

#para instalar yahoo finance en caso de que no corra
!pip install y finance

"""## Vamos a comparar estadisticamente una lista de tickers."""

# Descargamos 3 tickers

fecha_inicial="2021-12-31"
fecha_final="2023-10-05"

femsa=yf.download("FEMSAUBD.MX", fecha_inicial, fecha_final)
herdez= yf.download("HERDEZ.MX", fecha_inicial, fecha_final)
cuervo=yf.download("CUERVO.MX", fecha_inicial, fecha_final)
ac=yf.download("AC.MX", fecha_inicial, fecha_final)
alse=yf.download("ALSEA.MX", fecha_inicial, fecha_final)

tickers=["FEMSAUBD.MX", "HERDEZ.MX", "CUERVO.MX", "AC.MX", "ALSEA.MX"]

datos= yf.download(tickers, fecha_inicial, fecha_final)["Close"]
datos

datos.describe()

#Para sacar la desviación estandar
desviación_estandar=datos.std()
desviación_estandar

#Para sacar la varianza
varianza=desviación_estandar**2
varianza

varianza=datos.var()
varianza

#.pct_change() para sacar rendimientos simples
#.dropna() quita los datos no asignados

rendimientos=datos.pct_change().dropna()
rendimientos

#promedio
media=rendimientos.mean()
media

rendimientos.describe()

#desviación estandar
desv=rendimientos.std()
desv

#varianza
vari=rendimientos.var()
vari

# Matriz varianza covarianza
covarianza=rendimientos.cov()
covarianza

#formula para rendimientos
herdez["Rendimientos"]=(herdez["Close"]/herdez["Close"].shift(1))-1
herdez=herdez[["Close","Rendimientos"]]
herdez

#bins en cuanto se va a despedazar la grafica
herdez["Rendimientos"].hist(bins=30)

#sacar los rendimientos esperados
rend_esperado=(rendimientos.mean()/datos.shift(1))-1
rend_esperado.dropna()

cetes= np.array([0.0001953,
0.0001961,
0.0001958,
0.0001952,
0.0001958,
0.0001950,
0.0001944,
0.0001922,
0.0001925,
0.0001930,
0.0001931,
0.0001925,
0.0001908,
0.0001907,
0.0001911,
0.0001922,
0.0001929,
0.0001943,
0.0001936,
0.0001938,
0.0001933,
0.0001931,
0.0001930,
0.0001942,
0.0001943,
0.0001961,
0.0002009,
0.0002028,
0.0002042,
0.0002047,
0.0002029,
0.0002018,
0.0002027,
0.0002033,
0.0002033,
0.0002028,
0.0002033,
0.0002039,
0.0002044,
0.0002069,
0.0002064,
0.0002071,
0.0002097,
0.0002149,
0.0002189,
0.0002161,
0.0002195,
0.0002207,
0.0002234,
0.0002250,
0.0002243,
0.0002236,
0.0002230,
0.0002306,
0.0002288,
0.0002283,
0.0002294,
0.0002292,
0.0002303,
0.0002273,
0.0002259,
0.0002283,
0.0002292,
0.0002305,
0.0002317,
0.0002346,
0.0002357,
0.0002367,
0.0002359,
0.0002356,
0.0002364,
0.0002364,
0.0002362,
0.0002367,
0.0002395,
0.0002409,
0.0002444,
0.0002439,
0.0002437,
0.0002441,
0.0002439,
0.0002450,
0.0002434,
0.0002438,
0.0002440,
0.0002436,
0.0002418,
0.0002415,
0.0002425,
0.0002444,
0.0002453,
0.0002461,
0.0002469,
0.0002444,
0.0002460,
0.0002469,
0.0002463,
0.0002453,
0.0002472,
0.0002492,
0.0002492,
0.0002502,
0.0002503,
0.0002520,
0.0002546,
0.0002558,
0.0002581,
0.0002589,
0.0002570,
0.0002597,
0.0002625,
0.0002650,
0.0002647,
0.0002647,
0.0002654,
0.0002653,
0.0002664,
0.0002673,
0.0002664,
0.0002676,
0.0002678,
0.0002678,
0.0002678,
0.0002706,
0.0002692,
0.0002692,
0.0002687,
0.0002687,
0.0002681,
0.0002681,
0.0002679,
0.0002689,
0.0002704,
0.0002721,
0.0002714,
0.0002717,
0.0002728,
0.0002714,
0.0002713,
0.0002692,
0.0002689,
0.0002675,
0.0002673,
0.0002629,
0.0002614,
0.0002615,
0.0002616,
0.0002608,
0.0002611,
0.0002632,
0.0002636,
0.0002647,
0.0002635,
0.0002642,
0.0002645,
0.0002643,
0.0002683,
0.0002686,
0.0002690,
0.0002706,
0.0002713,
0.0002712,
0.0002717,
0.0002733,
0.0002746,
0.0002756,
0.0002772,
0.0002761,
0.0002772,
0.0002761,
0.0002774,
0.0002780,
0.0002770,
0.0002769,
0.0002764,
0.0002767,
0.0002806,
0.0002813,
0.0002830,
0.0002852,
0.0002861,
0.0002876,
0.0002911,
0.0002928,
0.0002956,
0.0003036,
0.0002978,
0.0002985,
0.0002974,
0.0002951,
0.0002956,
0.0002959,
0.0002963,
0.0002957,
0.0002961,
0.0002972,
0.0002967,
0.0002981,
0.0002994,
0.0003006,
0.0003012,
0.0003021,
0.0003055,
0.0003038,
0.0003033,
0.0003027,
0.0003010,
0.0002997,
0.0002994,
0.0003019,
0.0003019,
0.0003031,
0.0003023,
0.0003027,
0.0003022,
0.0003008,
0.0002958,
0.0002967,
0.0002975,
0.0002986,
0.0002981,
0.0003000,
0.0003008,
0.0003016,
0.0003019,
0.0003021,
0.0003023,
0.0003034,
0.0003021,
0.0003027,
0.0003014,
0.0003008,
0.0003013,
0.0003005,
0.0002975,
0.0002972,
0.0002978,
0.0002966,
0.0002974,
0.0002979,
0.0002975,
0.0002980,
0.0002992,
0.0002971,
0.0002972,
0.0002972,
0.0002972,
0.0003056,
0.0003042,
0.0003039,
0.0003053,
0.0003042,
0.0003033,
0.0003033,
0.0003042,
0.0003033,
0.0003028,
0.0003055,
0.0003047,
0.0003049,
0.0003053,
0.0003058,
0.0003065,
0.0003050,
0.0003054,
0.0003062,
0.0003066,
0.0003083,
0.0003081,
0.0003092,
0.0003089,
0.0003089,
0.0003081,
0.0003082,
0.0003067,
0.0003087,
0.0003099,
0.0003109,
0.0003194,
0.0003255,
0.0003283,
0.0003306,
0.0003301,
0.0003306,
0.0003333,
0.0003344,
0.0003269,
0.0003361,
0.0003352,
0.0003367,
0.0003367,
0.0003361,
0.0003368,
0.0003361,
0.0003357,
0.0003351,
0.0003364,
0.0003366,
0.0003306,
0.0003291,
0.0003253,
0.0003248,
0.0003188,
0.0003198,
0.0003185,
0.0003239,
0.0003231,
0.0003246,
0.0003253,
0.0003285,
0.0003297,
0.0003302,
0.0003252,
0.0003253,
0.0003258,
0.0003253,
0.0003255,
0.0003271,
0.0003292,
0.0003278,
0.0003264,
0.0003263,
0.0003267,
0.0003269,
0.0003286,
0.0003274,
0.0003258,
0.0003236,
0.0003228,
0.0003203,
0.0003210,
0.0003217,
0.0003219,
0.0003208,
0.0003203,
0.0003203,
0.0003207,
0.0003197,
0.0003192,
0.0003199,
0.0003205,
0.0003196,
0.0003194,
0.0003196,
0.0003190,
0.0003193,
0.0003197,
0.0003197,
0.0003196,
0.0003194,
0.0003191,
0.0003184,
0.0003181,
0.0003175,
0.0003176,
0.0003178,
0.0003180,
0.0003169,
0.0003161,
0.0003154,
0.0003144,
0.0003142,
0.0003142,
0.0003136,
0.0003131,
0.0003131,
0.0003132,
0.0003125,
0.0003122,
0.0003106,
0.0003096,
0.0003086,
0.0003092,
0.0003095,
0.0003117,
0.0003119,
0.0003124,
0.0003125,
0.0003126,
0.0003139,
0.0003134,
0.0003142,
0.0003167,
0.0003133,
0.0003136,
0.0003134,
0.0003132,
0.0003139,
0.0003142,
0.0003142,
0.0003133,
0.0003134,
0.0003142,
0.0003136,
0.0003133,
0.0003122,
0.0003118,
0.0003119,
0.0003122,
0.0003133,
0.0003131,
0.0003144,
0.0003181,
0.0003150,
0.0003159,
0.0003174,
0.0003183,
0.0003183,
0.0003182,
0.0003189,
0.0003186,
0.0003194,
0.0003187,
0.0003175,
0.0003186,
0.0003186,
0.0003188,
0.0003186,
0.0003189,
0.0003190,
0.0003194,
0.0003200,
0.0003214,
0.0003217,
0.0003216,
0.0003216,
0.0003231,
0.0003229,
0.0003222,
0.0003222,
0.0003222,
0.0003231,
0.0003240,
0.0003239,
0.0003242,
0.0003231,
0.0003235,
0.0003250,
0.0003252,
0.0003237,
0.0003233,
0.0003236,
0.0003254,
0.0003236])

Weights= np.array([0.20,0.20,0.10,0.20,0.30])

rend_diario= rendimientos@Weights
rend_diario

Excess_return_diario= rend_diario-cetes
Excess_return_diario

